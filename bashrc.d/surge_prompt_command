#!/bin/bash



# Глобальные переменные скрипта
# =============================
# Префикс surge_ используется для предотвращения конфликтов имен в глобальном окружении bash

declare -A surge_SETTINGS

declare -a surge_ERR_LINE=() # Массив для хранения кодов возврата команд в цепочке

# @fixme: иследовать возможность использовать переменную bash LINENO. @reject - LINENO не считает тут
declare -i surge_CCOUNTER=0  # Счетчик команд для корректной обработки цепочек команд

# region function surge_truncate_path
# Используется встроенная переменная bash SECONDS как секундомер:
# - Сбрасывается в 0 перед выполнением команды
# - Автоматически увеличивается на 1 каждую секунду
# - Значение передается в surge_print_nfo_line для отображения времени выполнения

# Сокращает длинные пути для улучшения читаемости промпта
# Пример: /very/long/path/to/somewhere -> …/to/somewhere
#
# $1 - исходный путь
# $2 - максимальная длина результата
function surge_truncate_path() {
    local path="$1"
    local max_len="$2"
    if ((${#path} > max_len)); then
        echo "…${path: -$max_len:$max_len}"
    else
        echo "$path"
    fi
}
# endregion

# region function surge_print_nfo_line
# Форматирует и выводит информационную строку после выполнения команды/цепочки команд.
# Ета строка содержит:
# - Время выполнения (если больше 5 секунд) в формате [ЧЧ:ММ:СС]
# - Коды возврата всех команд в цепочке
# - Маркер '=' при потере кодов возврата в длинных цепочках
#
# Особенности форматирования:
# - Восстанавливает нормальное состояние терминала перед выводом
# - Использует Overlined стиль для визуального разделения
# - Правое выравнивание кодов возврата
# - Цветовая индикация успешности (0 - зеленый, иначе - красный)
#
# @param $1 - время выполнения в секундах
# @param $@ - коды возврата команд (включая возможный маркер '=')
function surge_print_nfo_line() {

  # Сброс/исправление терминала после выполнения команды.
  # @fixme: Может заменить на tput sgr0? @decision - Не изменять, так как текущий вариант стабильнее.
  printf '\e(B\e[00m'

  # Суммарная длина всех фиксированных элементов в строке
  local -i fixed_width=1 # ... начиная с "начальный отступ от левого края"
  
  local err_line='' # Строит отформатированную подстроку с кодами возврата

  # Первый аргумент - время выполнения команды
  local timestamp="$1" # ... сохраняется
  shift                 # ... и отбрасывается
                        # Теперь "$@" содержит только коды возврата
  
  # # Показывать время выполнения если больше time.show_threshold
  if (( timestamp > ${surge_SETTINGS[time.show_threshold]:-5} )); then
    # Форматируем временной интервал (timestamp) в [ЧЧ:ММ:СС]
    # если команда выполнялась дольше N секунд
    printf -v timestamp "[%02d:%02d:%02d]" \
        "$(( timestamp / 60 / 60 ))" \
        "$(( (timestamp / 60) % 60 ))" \
        "$(( timestamp % 60 ))"
        
    (( fixed_width = fixed_width + ${#timestamp} ))
  else
    timestamp=''
  fi

  # Расчет длины строки с кодами возврата (без пробелов)
  local line_len="$*"           # Все аргументы в одну строку
  line_len=${line_len// /} # Удаляем все пробелы
  line_len=${#line_len} && readonly line_len  # Получаем длину

  # Составление одной раскрашенной строки с кодами возврата (каждый код окружен пробелом)
  for n in "$@"; do          # перебор всех параметров (коды завершения)

    # @fixme: Проверить необходимость проверки пустых параметров. @closed
    # По текущей логике пустые параметры не должны появляться:
    # - SECONDS (встроенная переменная bash) всегда числовая
    # - surge_ERR_LINE содержит только коды возврата
    # - _mark либо "= " либо пропадает при подстановке
    # if [[ -n "${n}" ]]; then # пропуск возможного пустого параметра

      # и составление одной раскрашенной строки
      if [[ "${n}" = "=" ]]; then
        err_line+="\e[38;2;${surge_SETTINGS[color.background.light]}m\e[49m $n " #< маркер "="
      elif (( n == 0 )); then
        err_line+="\e[38;2;${surge_SETTINGS[color.status.success]}m\e[49m $n " #< нулевой код
      else
        err_line+="\e[38;2;${surge_SETTINGS[color.status.error]}m\e[49m $n " #< не нулевой код
      fi
      (( fixed_width += 2 ))
    # fi
  done

  printf '\n'
  # Вывод в формате: [ЧЧ:ММ:СС]<заполнитель-до-правого-края><коды-возврата>
  # Вся строка отображается с форматированием Overline ( \e[53 )
  printf '%b %s' "\e[53;38;2;${surge_SETTINGS[color.background.light]}m\e[49m" "${timestamp}" # Время выполнения
  printf '%*s' $(( COLUMNS - 1 - line_len - fixed_width )) ' '             # Заполнение пространства вправо
  printf '%b%b' "${err_line}" "\e[0m"                                   # Коды возврата и сброс форматирования
  printf '\n\n'
}
# endregion

# region function surge_trap_precommand
# Обработчик trap DEBUG для отслеживания выполнения пользовательских команд.
# Вызывается перед каждой командой в цепочке команд командной строки.
# @todo: Добавить дополнительную визуальную разделительную линию 
# для команд, запускаемых через sudo, чтобы явно выделять 
# команды с повышенными привилегиями
# @todo: Добавить дополнительную визуальную разделительную линию для sudo команд:
# 1. Установить флаг при обнаружении sudo в BASH_COMMAND
# 2. В surge_print_precommand использовать другой стиль линии если флаг установлен
function surge_trap_precommand() {

  # trap - DEBUG # @fixme: Проверить необходимость сброса trap @closed: Сброс не обязателен

  # Пропускаем обработку служебных команд промпта
  if [[ "${BASH_COMMAND}" =~ ^surge_ ]] || [[ "${BASH_COMMAND}" =~ ^trap ]] || [[ "${BASH_COMMAND}" =~ ^history\ -(a|n)$ ]]; then
    return
  fi

  # Обновление заголовка окна терминала текущей командой
  printf '\e]0;%s\a' "${debian_chroot:+($debian_chroot)}${SSH_CONNECTION:+SSH:}${USER}@${HOSTNAME} 〉 ${BASH_COMMAND:0:25}"

  # Управление счетчиком команд и таймером
  (( surge_CCOUNTER == 0 )) && SECONDS=0 # обнуление таймера перед первой командой
  
  (( ++surge_CCOUNTER )) # подсчет команд
  
}
# endregion

# region function surge_postcommand
# Обработчик завершения пользовательских команд.
# Вызывается через PROMPT_COMMAND после выполнения всех команд.
#
# Функционал:
# - Восстанавливает заголовок терминала
# - Отображает результаты выполнения команд через surge_print_nfo_line:
#   - время выполнения
#   - коды возврата
#   - маркер '=' при потере кодов в множественных конвейерах
# - Сбрасывает счетчики для следующего ввода
function surge_postcommand() {

  # сбросить заголовок окна
  printf '\e]0;%s\a' "${debian_chroot:+($debian_chroot)}${SSH_CONNECTION:+SSH:}${USER}@${HOSTNAME}"

  if ((surge_CCOUNTER > 0)); then

    # Проверка на потерю кодов возврата при нескольких конвейерах через ;
    # Пример: cmd1|cmd2 ; cmd3|cmd4  -- PIPESTATUS сохранит только коды для cmd3|cmd4
    { ((surge_CCOUNTER > ${#surge_ERR_LINE[@]})) && local -r _mark='= '; } || local -r _mark=''

    # shellcheck disable=SC2086,SC2048
    surge_print_nfo_line "${SECONDS}" ${_mark} ${surge_ERR_LINE[*]} # вывести строку статуса
    surge_ERR_LINE=('')
    
    surge_CCOUNTER=0 # сбросить счетчик команд

  else
    # Пустая строка (Enter без команды или C-c)
    # @fixme: Попытки уменьшить кол-во пустых строк через прокрутку 
    # терминала приводят к побочным эффектам
    # printf '\e[2A'  # Переместить курсор на 2 строки вверх
    # printf '\e[0J'  # Очистить экран от курсора до конца
    :
  fi

}
# endregion

# region function surge_print_precommand
# Визуально создает эффект разделительной линии между строкой ввода команды и её выводом.
# Функция вызывается через PS0 перед выводом результатов команды.
# Использует Overlined стиль для экономии вертикального пространства.
function surge_print_precommand() {

  # Линия через Overlined стиль на всю ширину терминала минус 1 символ
  printf '%b%*s%b\n' "\e[53;38;2;${surge_SETTINGS[color.background.light]}m\e[49m" "$(( ${COLUMNS:-$(tput cols)} - 1 ))" ' ' "\e[0m" 
  printf '\e[J' #< Очистка до конца экрана для предотвращения артефактов подсветки

  # @note: Влиять на историю тут не стоит
  # @note: поменять заголовок окна на текущую команду тут не получится
}
# endregion

# region function surge_print_prompt
# Формирует двустрочный prompt командной строки:
# - Текущий каталог/репозиторий с возможностью перехода по клику
# - Информация о git (ветка, статус изменений)
# - Различное оформление для каталогов с правами и без прав на запись
#
# Первая строка:
# - Текущий путь/репозиторий с поддержкой перехода по клику
# - Усечение длинных путей для компактного отображения
# - Цветовая индикация прав на запись
#
# Вторая строка:
# - user@host с индикацией root-пользователя и SSH-соединения
# - Для git-репозитория с правами на запись:
#   * имя ветки (подчеркнуто если не main/master)
#   * статус изменений через цвет
#   * количество stash-записей
#   * текущий подкаталог относительно корня репозитория
# - Символ-разделитель и стиль для вводимого текста
#
# Использует специальные маркеры \1 и \2 для корректного 
# подсчета длины промпта bash'ем
function surge_print_prompt() {

  # Определяем контекст текущего каталога:
  # - Для git репозитория: путь к его корню
  # - Для обычного каталога: текущий путь
  local -i is_git=0
  local top_path=''
  local marker=''

  if git rev-parse --is-inside-work-tree &>/dev/null; then
    # Находимся внутри git репозитория
    is_git=1 && readonly is_git
    # Получаем путь к корню репозитория с сохранением символических ссылок
    # @fixme: Проверить необходимость сложной конструкции с cd+pwd 
    #         вместо простого git rev-parse --show-toplevel
    top_path="$(cd "$(git rev-parse --show-cdup 2>/dev/null)." && pwd 2>/dev/null)" && readonly top_path # так надо если каталог символ. ссылка
    marker=' (git) '
  else
    # Обычный каталог
    is_git=0 && readonly is_git
    top_path="$(pwd 2>/dev/null)" && readonly top_path
  fi

  # Установка стиля. \1 и \2 маркируют невидимые символы форматирования,
  # чтобы bash правильно рассчитывал длину промпта для позиционирования курсора
  printf '\1%b\2' "\e[0;48;2;${surge_SETTINGS[color.background.dark]}m"

  local top_path_style=''
  local sub_path_style=''

  # Стиль текста зависит от прав на запись в текущий каталог
  if [[ -w "${PWD}" ]]; then
    # Каталог доступен для записи
    top_path_style="\e[38;2;${surge_SETTINGS[color.path.normal]};1m" && readonly top_path_style
    sub_path_style="\e[38;2;${surge_SETTINGS[color.path.normal]}m" && readonly sub_path_style
  else
    # Каталог только для чтения
    top_path_style="\e[38;2;${surge_SETTINGS[color.path.readonly]};1m" && readonly top_path_style
    sub_path_style="\e[38;2;${surge_SETTINGS[color.path.readonly]}m" && readonly sub_path_style
  fi

  # Вывод первой строки промпта с полным путем
  printf '\1%b\2' "${top_path_style}" # Установка стилей

  # Вывод пути с поддержкой перехода по клику
  # format: \e]8;;URL\e\\VISIBLE_TEXT\e]8;;\e\\
  # '\e[K' - заполнение фоном до конца строки
  # Путь должен обрезатся если не помещается в одну строку
  # Ограничение длины отображаемого пути
  # Отступ 6 символов для эстетического оформления
  # @todo: Магическое число 6 - пояснить или вынести в именованную константу
  # @fixme: Вынести создание терминальной ссылки в отдельную функцию terminal_link
  printf '%s\1%b%b%b\2\n' "${marker}" "\e]8;;file://${HOSTNAME}${top_path}\e\\\\\2$(surge_truncate_path "${top_path}" "$(( COLUMNS - 6 ))")\1\e]8;;\e\\" '\e[K' '\e[0m'

  # Форматирование user@host с индикацией типа пользователя (root/обычный)
  # и наличия SSH-соединения
  local user_style=''
  if (("$EUID" == 0)); then
    # если root
    user_style="\e[49;38;2;${surge_SETTINGS[color.prompt.warning]}m" && readonly user_style
  else
    # если нет
    user_style="\e[49;38;2;${surge_SETTINGS[color.prompt.normal]}m" && readonly user_style
  fi
  # Вывод "user@host" с добавлением "SSH:" при подключении через SSH
  printf '\1%b\2%s\1%b\2@' "${user_style}" "${USER}" "\e[0;38;2;${surge_SETTINGS[color.prompt.normal]}m"
  # хост
  printf '%s\1%b\2 ' "${SSH_CONNECTION:+SSH:}${HOSTNAME}" "\e[0m"

  # Отображение git-информации только если:
  # - Текущий каталог в git-репозитории
  # - Есть права на запись (иначе работа с репозиторием невозможна)
  if (( is_git == 1 )) && [[ -w "${PWD}" ]]; then # git и есть разрешение на запись

    # Определение текущей ветки репозитория
    # ??????? как индикатор отсутствия текущей ветки (detached HEAD и т.п.)
    local branch_name=''
    branch_name="$(git branch --show-current 2>/dev/null)"
    branch_name="${branch_name:-"???????"}" && readonly branch_name # Заполнитель для состояний без активной ветки (detached HEAD и т.п.)

    # Установка стиля для имени ветки:
    # - Подчеркивание для веток отличных от main/master
    # @fixme: Вынести main/master в конфигурируемый список основных веток. @reject
    if [ "${branch_name}" != "master" ] && [ "${branch_name}" != "main" ]; then
      printf '\1%b\2' "\e[49;4:1;58;2;${surge_SETTINGS[color.prompt.warning]}m" #< не main/master
    fi

    # Установка цвета текста в зависимости от состояния ветки
    # @todo: Рассмотреть использование полного стиля вместо только цвета
    if [ "$(git status --porcelain 2>/dev/null | wc -l)" = "0" ]; then
      printf '\1%b\2' "\e[38;2;${surge_SETTINGS[color.prompt.normal]}m" # Нет изменений
    else
      printf '\1%b\2' "\e[38;2;${surge_SETTINGS[color.prompt.warning]}m" # Есть несохраненные изменения
    fi

    # Вывод имени ветки и сброс форматирования
    printf '%s\1%b\2' "${branch_name}" "\e[0m"
    
    # Отображение количества stash-записей, если они есть
    # @todo: Рассмотреть выделение количества stash-записей через стили 
    #         вместо обрамления фигурными скобками
    local stash_count=''
    stash_count="$(git stash list 2>/dev/null | wc -l)" && readonly stash_count
    if [[ "${stash_count}" != "0" ]]; then
      printf '{%s}' "${stash_count}" # Скобки для визуального выделения
    fi

    # Отображение текущего подкаталога относительно корня репозитория
    # Чтобы визуально показать, что это относительный путь внутри репозитория
    # используется префикс …/
    local -r sub_path="…/$(surge_truncate_path "$(git rev-parse --show-prefix 2>/dev/null)" 25)"
    # @fixme: Вынести создание терминальной ссылки в отдельную функцию terminal_link
    printf ' \1%b%b\2\1%b\2 ' "${sub_path_style}" "\e]8;;file://${HOSTNAME}${PWD}\e\\\\\2${sub_path}\1\e]8;;\e\\" "\e[0m"
  fi

  # Вывод символа-разделителя и установка стиля для командной строки:
  # - Символ 〉 в том же стиле, что и имя пользователя
  # - Последующий ввод будет отображаться заданным стилем
  printf '\1%b\2%s\1%b\2' "${user_style}" '〉' \
     "\e[0;1;38;2;${surge_SETTINGS[color.text.normal]}m"

}
# endregion


# ТОЧКА ВХОДА ##
# ==============================================================================

# Определение chroot окружения
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
  debian_chroot=$(cat /etc/debian_chroot)
fi

# Базовая настройка промпта
PROMPT_DIRTRIM=3

# Определение типа терминала и настройка промпта:
if [[ -n "$GNOME_TERMINAL_SCREEN" && "$TERM" = "xterm-256color" ]]; then
    # Включаем поддержку true color
    export COLORTERM=truecolor
    
    # Проверяем наличие необходимых команд
    if command -v git >/dev/null && [[ -r "${HOME}/.bashrc.d/surge.config" ]]; then

        # Загружаем настройки цветов
        # @todo: Перейти на более простой формат конфигурации @closed
        # @todo: Вместо просто цвета хранить в настройках полный стиль
        while IFS='=' read -r key value; do
            [[ $key =~ ^#.*$ ]] && continue
            [[ -n "${key}" ]] && surge_SETTINGS["${key}"]="${value}"
        done < "${HOME}/.bashrc.d/surge.config"
        
        # Включаем расширенный промпт
        # history -a; history -n -- предотвращают потерю истории и синхронизируют ее между текущими сессиями. HISTIGNORE= должен содержать history*:
        # surge_ERR_LINE=(${PIPESTATUS[*]}) -- Сохраняем коды возврата на момент входа в функцию для последующего вывода
        PROMPT_COMMAND='surge_ERR_LINE=(${PIPESTATUS[*]}); history -a; history -n; trap surge_trap_precommand DEBUG; surge_postcommand;'
        # shellcheck disable=SC2016
        PS0='$(surge_print_precommand)'
        PS1='${debian_chroot:+($debian_chroot)}$(surge_print_prompt)'
    else
        echo "SURGE: Включен базовый режим промпта. " >&2
        command -v git >/dev/null || echo "Не найдена команда git. " >&2
        [[ -r "${HOME}/.bashrc.d/surge.config" ]] || echo "Файл конфигурации не доступен." >&2
        echo -e "Устраните сломанные зависимости для работы расширенного промпта.\n" >&2
        PS1='\n${debian_chroot:+($debian_chroot)}\u@\h:\w\ 〉'
    fi
elif [[ "${TERM_PROGRAM}" == "vscode" ]]; then
    # Цветной промпт для VSCode
    PS1='\[\e[0;1m\]\n${debian_chroot:+($debian_chroot)}\[\e[32m\]\u@\h\[\e[0m\]:\[\e[34m\]\w 〉\[\e[0m\]'
else
    # Простой промпт для остальных терминалов
    PS1='\n${debian_chroot:+($debian_chroot)}\u@\h:\w\ 〉'
fi

