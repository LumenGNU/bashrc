#!/bin/bash

command -v git >/dev/null || exit 1
command -v cpp >/dev/null || exit 1

declare -a BPPP_ERR_LINE=''
declare -i BPPP_CCOUNTER=0

function bppp_truncate_path() {
    local path="$1"
    local max_len="$2"
    if ((${#path} > max_len)); then
        echo "…${path: -$max_len:$max_len}"
    else
        echo "$path"
    fi
}

# bppp_trap_precommand() и bppp_postcommand() - Обработчики для отслеживания выполнения команд:
#
# Замеряют время выполнения
# Сохраняют коды возврата
# Обновляют заголовок окна терминала
#
# Интересные детали реализации:
#
# Использует ANSI escape sequences для форматирования
# Поддерживает символические ссылки с особым индикатором
# Имеет индикацию прав записи в директорию
# Загружает цветовую схему из Xresources
# Корректно обрабатывает длинные пути с усечением

# Рисует информационную строку после выполнения команды:
#
# Показывает время выполнения (если >5с)
# Отображает коды возврата команд
# Использует цветовое кодирование для успешных/неуспешных результатов
# region function bppp_print_nfo_line
# функция рисует инф-строку после выполнения команды. Типа такой:
# ‾[1:23:57]‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾ 0  0  2‾
#               отделяющая линия -^
#  ^-- время выполнения команды (отображается если >5c)
#                                        коды завершения команд(ы)  -^
## bppp_print_nfo_line timestamp errCode1 errCode2 ... errCodeN
function bppp_print_nfo_line() {

  printf '\E(B\E[00m' #\E[J' #< очистить экран от курсора до конца

  local -i _padding=1
  local _err_line=''

  local _timestamp="$1"
  shift
  if ((_timestamp > 5)); then
    # timestamp to hh:mm:ss
    printf -v _timestamp "[%02d:%02d:%02d]" "$((_timestamp / 60 / 60))" "$(((_timestamp / 60) % 60))" "$((_timestamp % 60))"
    ((_padding = _padding + ${#_timestamp}))
  else
    _timestamp=''
  fi #< первый параметр обработан сохранен в _timestamp, и отброшен (shift)

  local _err_line_len="$*"
  _err_line_len=${_err_line_len// /}
  _err_line_len=${#_err_line_len} #< длинна всех символов всех параметров исключая пробелы

  for n in "$@"; do          #< перебор всех параметров (коды завершения)
    if [[ -n "${n}" ]]; then #< пропуск возможного пустого параметра

      # и составление одной раскрашенной строки
      if [[ "${n}" = "=" ]]; then
        _err_line+="\033[38;2;${BPPP_COLORS[1]}m\033[49m $n " #< маркер "="
      elif ((n == 0)); then
        _err_line+="\033[38;2;${BPPP_COLORS[3]}m\033[49m $n " #< нулевой код (fg св-зеленый, bg по умолчанию)
      else
        _err_line+="\033[38;2;${BPPP_COLORS[4]}m\033[49m $n " #< не нулевой код (fg св-красный, bg по умолчанию)
      fi
      ((_padding += 2))
    fi
  done

  printf '\n'
  # # серый цвет----v + Overlined                                         #< печатает ....
  # printf -v __line '%b%*s' "\033[38;2;${BPPP_COLORS[1]}m\033[49m" "${COLUMNS:-$(tput cols)}" ' ' && printf '%b' "${__line// /#}\033[0m"
  # unset __line
  printf '%b %s' "\033[53;38;2;${BPPP_COLORS[1]}m\033[49m" "${_timestamp}" #< таймстамп или ничего (смотри выше)
  printf '%*s' $((COLUMNS - 1 - _err_line_len - _padding)) ' '          #< раскривушку из пробелов
  printf '%b%b' "${_err_line}" "\033[0m"                                # код(а) завершения
  printf '\n\n'
}
# endregion

# region function bppp_trap_precommand
# Автоматически вызывается перед выполнением каждой команды в списке/цепочке
# После всех введенных в к.с. команд всегда будут выполнены две команды:
# - trap 'bppp_trap_precommand' DEBUG
# - bppp_postcommand
#
function bppp_trap_precommand() {
  # shellcheck disable=SC2206
  local -ar _err_status=(${PIPESTATUS[*]})

  trap - DEBUG # @todo: может и не нада, но и не мешает

  case "${BASH_COMMAND}" in
  "bppp_postcommand")
    return
    ;;
  "trap 'bppp_trap_precommand' DEBUG")
    # shellcheck disable=SC2206
    BPPP_ERR_LINE=(${_err_status[*]}) #запомнить коды завершений
    return
    ;;
  esac

  # @todo: if BASH_COMMAND == sudo после нарисовать еще один бордер

  # поменять заголовок окна на текущую команду
  printf '\033]0;%s\a' "${debian_chroot:+($debian_chroot)}${SSH_CONNECTION:+SSH:}${USER}@${HOSTNAME}> ${BASH_COMMAND:0:25}"

  # обнулить счетчик времени
  ((BPPP_CCOUNTER == 0)) && SECONDS=0
  ((++BPPP_CCOUNTER))
}
# endregion

# region function bppp_postcommand
# Автоматически выполняется после выполнения всех команд в списке/цепочке
# Использует глобальные переменные: BPPP_ERR_LINE
#                                   BPPP_CCOUNTER
function bppp_postcommand() {

  # сбросить заголовок окна
  printf '\033]0;%s\a' "${debian_chroot:+($debian_chroot)}${SSH_CONNECTION:+SSH:}${USER}@${HOSTNAME}"

  if ((BPPP_CCOUNTER > 0)); then

    # PIPESTATUS - содержит коды завершения только последнего конвейера,
    # если выполнено несколько конвейеров проинформировать пользователя
    { ((BPPP_CCOUNTER > ${#BPPP_ERR_LINE[@]})) && local -r _mark='= '; } || local -r _mark=''

    # shellcheck disable=SC2086,SC2048
    bppp_print_nfo_line "${SECONDS}" ${_mark} ${BPPP_ERR_LINE[*]} #< нарисовать инфо-строку
    BPPP_ERR_LINE=('')

    BPPP_CCOUNTER=0 # сбросить счетчик команд
  else
    # если нет команды (<enter> в пустой строке|C-c)
    # @fixme: некрасиво получается
    # printf '\e[2A'
    # #< перед рисованием строки-приглашения сдвинутся вверх 2строки
    # printf '\e[0J'
    :
  fi

}
# endregion

# region function bppp_print_precommand
# Рисует линию разделитель между вводом в командной строке и выводом команды.
# Эта ф-ция вызывается bash`ем в подоболочке, поэтому присвоение переменным
# не имеет эффекта.
function bppp_print_precommand() {

  # линия разделитель между командой и ее выводом
  printf '%b%*s%b\n' "\033[53;38;2;${BPPP_COLORS[1]}m\033[49m" "$(( ${COLUMNS:-$(tput cols)} - 1 ))" ' ' "\033[0m" 
  printf '\E[J' #< очистить экран от курсора до конца

  #@note: поменять заголовок окна на текущую команду тут не получится
}
# endregion

# region function bppp_print_prompt
#
# Основная функция форматирования промпта:
#
# Показывает текущий каталог/репозиторий ~~с индикаторами (d/r для директории/репозитория)~~
# Отображает имя пользователя и хост
# Для git репозиториев показывает текущую ветку и статус изменений
# Подсвечивает ветки отличные от main/master
# Показывает количество stash записей
function bppp_print_prompt() {
  # получить путь к корню репозитория, если мы в репозитории,
  # иначе текущая директория
  # проверка того что мы внутри репозитория (в рабочей папке репозитория)
  if git rev-parse --is-inside-work-tree &>/dev/null; then
    # текущий путь внутри репозитория
    local -r is_git=1
    # shellcheck disable=SC2155
    local _bppp_toplevel="$(cd "$(git rev-parse --show-cdup 2>/dev/null)." && pwd 2>/dev/null)" # так надо если каталог символ. ссылка
  else
    # просто каталог
    # shellcheck disable=SC2155
    local _bppp_toplevel="$(pwd 2>/dev/null)"
  fi

  printf '\1%b\2' "\033[0;48;2;${BPPP_COLORS[0]}m"

  # if [[ "${PWD}" = "$(pwd -P 2>/dev/null)" ]]; then # физическая директория
  #   :
  # else # символьная директория
  #   :
  # fi

  # цвет для текущего текста каталог/репозиторий, зависит от того есть ли
  # разрешение на запись в этот каталог/репозиторий
  if [[ -w "${PWD}" ]]; then
    local -r _bppp_cf_prjdir="\033[38;2;${BPPP_COLORS[5]};1m" #< есть
    local -r _bppp_cf_subdir="\033[38;2;${BPPP_COLORS[5]}m"   #< есть
  else
    local -r _bppp_cf_prjdir="\033[38;2;${BPPP_COLORS[6]};1m" #< нет
    local -r _bppp_cf_subdir="\033[38;2;${BPPP_COLORS[6]}m"   #< нет
  fi

  # @mark Печать начало первой строки
  printf '\1%b\2' "${_bppp_cf_prjdir}"

  local -r _columns=$((COLUMNS - 6))
  # распечатать текущий каталог/репозиторий, обрезав начало если не помещается
  # в одну строку
  _bppp_toplevel="$(bppp_truncate_path "$_bppp_toplevel" "$_columns")"
  
  # @mark Печать первая строка, текущий каталог/репозиторий
  printf '\1%b%b%b\2\n' "\033]8;;file://${HOSTNAME}${_bppp_toplevel}\e\\\\\2${_bppp_toplevel}\1\033]8;;\e\\" '\033[K' "\033[0m"

  # user@host
  # юзер
  if (("$EUID" == 0)); then
    local -r _user_af="\033[49;38;2;${BPPP_COLORS[9]}m" #< если root
  else
    local -r _user_af="\033[49;38;2;${BPPP_COLORS[8]}m" #< если нет
  fi
  printf '\1%b\2%s\1%b\2@' "${_user_af}" "${SSH_CONNECTION:+SSH:}${USER}" "\033[0;38;2;${BPPP_COLORS[8]}m" #"\033[0m" #< разделитель
  # хост
  printf '%s\1%b\2 ' "${HOSTNAME}" "\033[0m"

  # branch | subdir
  if [[ ${is_git:-0} == 1 ]] && [[ -w "${PWD}" ]]; then # git и есть разрешение на запись

    # текущая ветка репозитория
    #  shellcheck disable=SC2155
    local _bppp_cur_brh="$(git branch --show-current 2>/dev/null)"
    _bppp_cur_brh="${_bppp_cur_brh:-"*****"}" # @fixme: точно нужно? НУЖНО

    # выделить подчеркиванием ветку с именем не main/master
    if [ "${_bppp_cur_brh}" != "master" ] && [ "${_bppp_cur_brh}" != "main" ]; then
      printf '\1%b\2' "\033[49;4:1;58;2;${BPPP_COLORS[9]}m" #< не main/master
    fi

    # выделить цветом если в ветке есть не сохраненные изменения
    if [ "$(git status --porcelain 2>/dev/null | wc -l)" = "0" ]; then
      printf '\1%b\2' "\033[38;2;${BPPP_COLORS[8]}m" #< state clean
    else
      printf '\1%b\2' "\033[38;2;${BPPP_COLORS[9]}m" #< state dirty
    fi

    # печатаем имя ветки
    printf '%s\1%b\2' "${_bppp_cur_brh}" "\033[0m"
    # shellcheck disable=2155
    local _stage_count="$(git stash list 2>/dev/null | wc -l)"
    if [[ "${_stage_count}" != "0" ]]; then
      printf '{%s}' "${_stage_count}"
    fi

    # текущий подкаталог текущего проекта(репозитория).
    local -r _bppp_cur_subdir="./$(bppp_truncate_path "$(git rev-parse --show-prefix 2>/dev/null)" 25)"

    printf ' \1%b%b\2\1%b\2 ' "${_bppp_cf_subdir}" "\033]8;;file://${HOSTNAME}${PWD}\e\\\\\2${_bppp_cur_subdir}\1\033]8;;\e\\" "\033[0m"
  fi

  printf '\1%b\2%s\1%b\2' "${_user_af}" '〉' "\033[0;1;38;2;${BPPP_COLORS[2]}m"

  #@todo: очистить окно терминала после изменения размеров
}

# endregion

## == ENTRY POINT ==>
# region Set PS1, PROMPT_COMMAND, terminal title etc.
# ==============================================================================

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
  debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)

case "$TERM" in
*-color | *-256color | *-direct)
  export COLORTERM=truecolor
  ;;
esac

PROMPT_DIRTRIM=3                            #< number of trailing directory components
if [[ "${COLORTERM}" = "truecolor" ]]; then # "цветной" терминал
  if [[ -n "$GNOME_TERMINAL_SCREEN" ]]; then
    # для всех кроме vscode
    # загрузка цветовой темы для ppp. Смотри ppp.xresources
    # @todo: клиетн должен иметь возможность передать цветовую тему
    mapfile -t BPPP_COLORS < <(cpp -P ~/.Xresources.d/ppp.xresources | grep -F 'ppp_theme.Colors.color' | sort | cut -f2 | cut -d' ' -f2)
    PROMPT_COMMAND="trap 'bppp_trap_precommand' DEBUG; bppp_postcommand"
    # shellcheck disable=SC2034,SC2016
    PS0='$(bppp_print_precommand)'
    PS1='${debian_chroot:+($debian_chroot)}$(bppp_print_prompt)'
  elif [[ "${TERM_PROGRAM}" == "vscode" ]]; then
    # для vscode
    PS1='\[\033[0;1m\]\n${debian_chroot:+($debian_chroot)}\[\033[32m\]\u@\h\[\033[0m\]:\[\033[34m\]\w 〉\[\033[0m\]'
  else
    # все остальные
    PS1='\n${debian_chroot:+($debian_chroot)}\u@\h:\w\ 〉'
  fi
  
fi

# endregion
