#!/bin/bash

# region ДОКУМЕНТАЦИЯ
# Полезные ссылки
# @see: wikipedia: ANSI escape code <https://en.wikipedia.org/wiki/ANSI_escape_code>
# @see: tput: Portable Terminal Control <https://www.gnu.org/software/termutils/manual/termutils-2.0/html_chapter/tput_1.html>
# @see: Prompt customization <https://wiki.archlinux.org/title/Bash/Prompt_customization>
# @see: Color Scheme for Gnome Terminal <https://gogh-co.github.io/Gogh/>
# @see: TERMINFO (ru) <http://www.linuxlib.ru/manpages/TERMINFO.4.shtml>
# @see: man terminfo <man:terminfo>
# @see: Export Gnome Terminal Profile <https://gist.github.com/fdaciuk/9ec4d8afc32063a6f74a21f8308e3807>
# @see: Hyperlinks in terminal https://gist.github.com/egmontkob/eb114294efbcd5adb1944c9f3cb5feda
# @see: hterm Control Sequences <https://chromium.googlesource.com/apps/libapps/+/a5fb83c190aa9d74f4a9bca233dac6be2664e9e9/hterm/doc/ControlSequences.md>
# @see: ANSI Escape Sequences <https://gist.github.com/fnky/458719343aabd01cfb17a3a4f7296797>
# Требуются дополнительные пакеты:
#   - fonts-powerline
#   - fonts-font-awesome
# endregion




# region FOR_DEBUG
# declare -r LOGFILE=/run/user/1000/bppp.log
# {
#   declare DEBUG_CC=0
#   declare BPPP_XXX='- - -'
#   echo ""
#   echo -e "ppp_command loadeed . . . . . . . . . . . . . . . . . . . . . . . . .\n"
#   # ( gnome-terminal -e "tail -f $LOGFILE" )&
# } >>$LOGFILE
# endregion

declare -a BPPP_ERR_LINE=''
declare -i BPPP_CCOUNTER=0

# region function ubppp_print_nfo_line
# функция рисует инф-строку после выполнения комманды. Типа такой:
# ‾[1:23:57]‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾ 0  0  2‾
#               отделяющая линия -^
#  ^-- время выполнения команды (отображается если >5c)
#                                        коды завершения комманд(ы)  -^
## ubppp_print_nfo_line timestamp errCode1 errCode2 ... errCodeN
function ubppp_print_nfo_line {

  # region FOR_DEBUG
  # {
  #   echo -e "\n${DEBUG_CC}  +++ function ubppp_print_nfo_line +++"
  #   echo "${DEBUG_CC}   ARGS = ${*}"
  #   echo "${DEBUG_CC}   -  ARG$((++_anc)) = ${1}"
  # } >>$LOGFILE
  # endregion

  printf '\E(B\E[00m' #\E[J' #< очистить экран от курсора до конца

  local -i _padding=1
  local _err_line=''

  local _timestamp="$1"
  shift
  if ((_timestamp > 5)); then
    # timestamp to hh:mm:ss
    printf -v _timestamp "[%02d:%02d:%02d]" "$((_timestamp / 60 / 60))" "$(((_timestamp / 60) % 60))" "$((_timestamp % 60))"
    ((_padding = _padding + ${#_timestamp}))
  else
    _timestamp=''
  fi #< первый параметр обработан сохранен в _timestamp, и отброшен (shift)

  local _err_line_len="$*"
  _err_line_len=${_err_line_len// /}
  _err_line_len=${#_err_line_len} #< длинна всех символов всех параметров исключая пробелы

  for n in "$@"; do          #< перебор всех параметров (коды завершения)
    if [[ -n "${n}" ]]; then #< пропуск возможного пустого параметра

      # region FOR_DEBUG
      # {
      #   echo "${DEBUG_CC}   -  ARG$((++_anc)) = ${n}"
      # } >>$LOGFILE
      # endregion

      # и составление одной раскрашеной строки
      if [[ "${n}" = "=" ]]; then
        _err_line="${_err_line}SGR(set_fg_rgb(128,170,179), reset_bg) $n " #< маркер
      elif ((n == 0)); then
        _err_line="${_err_line}SGR(set_fg_rgb(0,128,0), reset_bg) $n " #< нулевой код (fg св-зеленый, bg по умолчанию)
      else
        _err_line="${_err_line}SGR(set_fg_rgb(255,105,51), reset_bg) $n " #< не нулевой код (fg св-красный, bg по умолчанию)
      fi
      ((_padding = _padding + 2))
    fi
  done

  printf '\n'
  # # серый цвет----v + Overlined
  printf 'SGR(set_fg_rgb(76,85,101), overline_on) %s' "${_timestamp}"
  printf '%*s' $((COLUMNS - 1 - _err_line_len - _padding)) ' '
  printf '%b%b SGR(reset_all)' "${_err_line}" 'SGR(set_fg_rgb(76,85,101), overline_on)'
  printf '\n\n'
}
# endregion

# region function bppp_trap_precommand
# Автоматически вызываетя перед выполнением каждой комманды в списке/цепочке
# После всех введенных в к.с. комманд всегда будут выполнены две команды:
# - trap 'bppp_trap_precommand' DEBUG
# - bppp_postcommand
#
function bppp_trap_precommand {
  # shellcheck disable=SC2206
  local -ar _err_status=(${PIPESTATUS[*]})

  trap - DEBUG # @todo: может и не нада, но и не мешает

  # region FOR_DEBUG
  # {
  #   echo -e "\n${DEBUG_CC} ++ function bppp_trap_precommand ++"
  #   echo "${DEBUG_CC}  BPPP_XXX      = ${BPPP_XXX}"
  #   echo "${DEBUG_CC}  BASH_SUBSHELL = ${BASH_SUBSHELL}"
  #   echo "${DEBUG_CC}  BASH_COMMAND  = ${BASH_COMMAND}"
  #   echo "${DEBUG_CC}  BPPP_CCOUNTER = ${BPPP_CCOUNTER}"
  # } >>$LOGFILE
  # endregion

  [[ "${BASH_COMMAND}" == "bppp_postcommand" ]] && {

    # region FOR_DEBUG
    # {
    #   ((BPPP_CCOUNTER > 0)) && {
    #     echo "${DEBUG_CC}  * PRERUN bppp_postcommand:"
    #     echo "${DEBUG_CC}    ## ВСЕ КОМАНДЫ ВЫПОЛНЕНЫ ##"
    #     echo "${DEBUG_CC}    ## подготовка к вызову bppp_postcommand ##"
    #     echo "${DEBUG_CC}    BPPP_CCOUNTER = ${BPPP_CCOUNTER}"
    #     echo "${DEBUG_CC}    BPPP_ERR_LINE = ${#BPPP_ERR_LINE[@]}: ${BPPP_ERR_LINE[*]}"
    #     echo "${DEBUG_CC}    SECONDS       = ${SECONDS}"
    #   } >>$LOGFILE
    # }
    # endregion

    return
  }
  [[ "${BASH_COMMAND}" == "trap 'bppp_trap_precommand' DEBUG" ]] && { # все команды выполнены
    # shellcheck disable=SC2206
    BPPP_ERR_LINE=(${_err_status[*]}) #запомнить кооды завершений

    # region FOR_DEBUG
    # {
    #   echo "${DEBUG_CC}  * PRERUN trap 'bppp_trap_precommand' DEBUG:"
    #   echo "${DEBUG_CC}    nothing return"
    # } >>$LOGFILE
    # endregion

    return
  }

  # @todo: if BASH_COMMAND == sudo после нарисовать еще один бордер

  # region FOR_DEBUG
  # {
  #   echo "${DEBUG_CC}  ## меняется заголовок на: ##"
  #   echo "${DEBUG_CC}     ${debian_chroot:+($debian_chroot)}${USER}@${HOSTNAME}> ${BASH_COMMAND:0:25}"
  # } >>$LOGFILE
  # endregion

  # поменять заголовок окна на текущую команду
  printf 'set_title(%s)' "${debian_chroot:+($debian_chroot)}${USER}@${HOSTNAME}> ${BASH_COMMAND:0:25}"

  # обнулить счетчик времени
  ((BPPP_CCOUNTER == 0)) && {

    # region FOR_DEBUG
    # {
    #   echo "${DEBUG_CC}  ## первая команда, сброс счетчика SECONDS ##"
    #   echo "${DEBUG_CC}     SECONDS = ${SECONDS} -> 0"
    # } >>$LOGFILE
    # endregion

    SECONDS=0
  }

  ((++BPPP_CCOUNTER))

  # region FOR_DEBUG
  # {
  #   echo "${DEBUG_CC}  ## приращение счетчика команд BPPP_CCOUNTER ##"
  #   echo "${DEBUG_CC}     ++BPPP_CCOUNTER = ${BPPP_CCOUNTER}"
  # } >>$LOGFILE
  # endregion

}
# endregion

# region function bppp_postcommand
# Автоматически выполняется после выполнения всех команд в списке/цепочке
# Использует глобальные переменные: BPPP_ERR_LINE
#                                   BPPP_CCOUNTER
function bppp_postcommand {

  # region FOR_DEBUG
  # {
  #   echo -e "\n${DEBUG_CC} ++ function bppp_postcommand ++"
  #   echo "${DEBUG_CC}  BPPP_CCOUNTER = ${BPPP_CCOUNTER}"
  #   echo "${DEBUG_CC}  BPPP_ERR_LINE = ${#BPPP_ERR_LINE[@]}: ${BPPP_ERR_LINE[*]}"
  #   echo "${DEBUG_CC}  SECONDS = ${SECONDS}"
  # } >>$LOGFILE
  # endregion

  # region FOR_DEBUG
  # {
  #   echo "${DEBUG_CC}  ## сбросить заголовок окна: ##"
  #   echo "${DEBUG_CC}     ${debian_chroot:+($debian_chroot)}${USER}@${HOSTNAME}"
  # } >>$LOGFILE
  # endregion

  # сбросить заголовок окна
  printf 'set_title(%s)' "${debian_chroot:+($debian_chroot)}${USER}@${HOSTNAME}"

  if ((BPPP_CCOUNTER > 0)); then

    # PIPESTATUS - содержит коды завершения только последнего конвеера,
    # если выполнено несколько конвееро проинформировать пользователя
    { ((BPPP_CCOUNTER > ${#BPPP_ERR_LINE[@]})) && local -r _mark='= '; } || local -r _mark=''

    # region FOR_DEBUG
    # {
    #   echo "${DEBUG_CC}  ## вызов ubppp_print_nfo_line ##"
    #   echo "${DEBUG_CC}     => ${SECONDS} ${_mark} ${BPPP_ERR_LINE[*]}"
    # } >>$LOGFILE
    # endregion

    # shellcheck disable=SC2086,SC2048
    ubppp_print_nfo_line "${SECONDS}" ${_mark} ${BPPP_ERR_LINE[*]} #< нарисовать инфо-строку
    BPPP_ERR_LINE=('')

    # region FOR_DEBUG
    # {
    #   echo "${DEBUG_CC}  ## сброс счетчика BPPP_CCOUNTER ##"
    #   echo "${DEBUG_CC}     BPPP_CCOUNTER = ${BPPP_CCOUNTER} -> 0"
    # } >>$LOGFILE
    # endregion

    BPPP_CCOUNTER=0 # сбросить счетчик комманд
  else
    # если нет команды (ентер в пустой строке|C-c)
    # @fixme: некрасиво получается
    # printf '\e[2A' 
    # #< перед рисованием строки-приглашения сдвинутся вверх 2строки
    # printf '\e[0J'
    :
  fi

  # region FOR_DEBUG
  #echo "${DEBUG_CC}   ++DEBUG_CC" >>$LOGFILE
  ((++DEBUG_CC))
  # endregion
}
# endregion

# region function bppp_print_precommand
# Рисует линию разделитель между вводом в командной строке и выводом команды.
# Эта ф-ция вызывается bash`ем в подоболочке, поэтому присвение переменным
# не имеет эфекта.
function bppp_print_precommand {

  # region FOR_DEBUG
  # {
  #   echo -e "\n${DEBUG_CC} ++ function bppp_print_precommand ++"
  #   echo "${DEBUG_CC}  BASH_SUBSHELL = ${BASH_SUBSHELL}"
  #   echo "${DEBUG_CC}  ## рисуется линия разделитель ##"
  #   BPPP_XXX='X X X'
  # } >>$LOGFILE
  # endregion

  # линия разделитель между командой и ее выводом
  printf '%b%*s%b\n' 'SGR(reset_bg, set_fg_rgb(76,85,101), strike_on)' $((COLUMNS)) ' ' 'SGR(reset_all)'
  printf '\E[J' #< очистить экран от курсора до конца

  #@note: поменять заголовок окна на текущую команду тут не получится
}
# endregion

# region function bppp_print_prompt
function bppp_print_prompt() {

  # получить путь к корню репозитория, если мы в репозитории,
  # иначе текущая дериктория
  # проверка того что мы внутри репозитория (в рабочей папке репозитория)
  if git rev-parse --is-inside-work-tree &>/dev/null; then
    local -r _is_git_flag='yes'
    local icon='\uf1d2'  #'\uf1d2' #'\uf841' #'\uf121' #< git репозиторий
    # shellcheck disable=SC2155
    local _bppp_toplevel="$(cd "$(git rev-parse --show-cdup 2>/dev/null)." && pwd)" # так надо если каталог символ. ссылка
  else
    local -r _is_git_flag=''
    local icon='\uf07b' #< обычный каталог
    # shellcheck disable=SC2155
    local _bppp_toplevel="$(pwd)"
  fi

  # region FOR_DEBUG
  # {
  #   echo -e "\n${DEBUG_CC} ++ function bppp_print_prompt ++"
  #   echo "${DEBUG_CC}  _is_git_flag   = ${_is_git_flag}"
  #   echo "${DEBUG_CC}  _bppp_toplevel = ${_bppp_toplevel}"
  # } >>$LOGFILE
  # endregion

  if [[ "${PWD}" = "$(pwd -P)" ]]; then
    printf '\1SGR(reset_all, set_bg_rgb(21,28,33))\2' # physical directory
  else
    printf '\1SGR(reset_all, set_bg_rgb(26,21,33))\2' # directory with symbolic links
  fi

  # цвет для текущего текста каталог/репозиторий, зависит от того есть ли
  # разрешение на запись в этот каталог/репозиторий
  {
    [[ -w "${PWD}" ]] && local -r _bppp_cf_subdir='\1SGR(set_fg_rgb(255,209,51))\2' #< есть
  } || local -r _bppp_cf_subdir='\1SGR(set_fg_rgb(255,114,92))\2'                   #< нет

  printf '%b %b \1SGR(bold_on)\2' "${_bppp_cf_subdir}" ${icon}

  local -r _columns=$((COLUMNS - 6))
  # распечатать текущий каталог/репозиторий, обрезав начало если не помещается
  # в одну строку
  ((${#_bppp_toplevel} > _columns)) && _bppp_toplevel="…${_bppp_toplevel: -$_columns:$_columns}"
  printf ' %s\1\033[K\2\n' "${_bppp_toplevel}"


  # region FOR_DEBUG
  # {
  #   echo "${DEBUG_CC}  _columns   = ${_columns}"
  #   echo "${DEBUG_CC}  _bppp_toplevel = ${_bppp_toplevel}"
  # } >>$LOGFILE
  # endregion

  # user@host

  # юзер
  if (("$EUID" == 0)); then
    local -r _user_af='\1SGR(reset_bg, set_fg_rgb(255,29,140))\2' #< если root
  else
    local -r _user_af='\1SGR(reset_bg, set_fg_rgb(228,149,69))\2' #< если нет
  fi
  printf '%b%s\1SGR(reset_all)\2@' "${_user_af}" "${USER}" #< разделитель
  # хост
  if [[ -n "${SSH_CLIENT}" ]] || [[ -n "${SSH_TTY}" ]] || [[ -n "${SSH_CONNECTION}" ]]; then
    printf "\1SGR(reset_bg, set_fg_rgb(255,29,140))\2" #< если ssh
  else
    printf "\1SGR(reset_bg, set_fg_rgb(228,149,69))\2" #< если локальный
  fi
  printf '%s\1SGR(reset_all)\2 ' "${HOSTNAME}"

  # branch | subdir

  if [[ "${_is_git_flag}" == 'yes' ]]; then # git

    # текущая ветка репозитория
    #  shellcheck disable=SC2155
    local _bppp_cur_brh="$(git branch --show-current 2>/dev/null)"
    _bppp_cur_brh="${_bppp_cur_brh:-"***"}" # @fixme: точно нужно?

    # виделить подчеркиванием ветку с именем не main/master
    if [ "${_bppp_cur_brh}" = "master" ] || [ "${_bppp_cur_brh}" = "main" ]; then
      printf '\1SGR(reset_bg, underline_on, set_underline_rgb(228,149,69))\2' #< main/master
    else
      printf '\1SGR(reset_bg, underline_on, set_underline_rgb(255,26,241))\2' #< не main/master
    fi

    # виделить цветом если в вветке есть не сохраненные изменения
    if [ "$(git status --porcelain 2>/dev/null | wc -l)" = "0" ]; then
      printf '\1SGR(set_fg_rgb(228,149,69))\2' #< clean
    else
      printf '\1SGR(set_fg_rgb(74,210,233))\2' #< dirty
    fi

    # печатаем имя ветки
    printf "%s\1SGR(reset_all)\2" "${_bppp_cur_brh}"
    # shellcheck disable=2155
    local _stage_count="$(git stash list 2>/dev/null | wc -l)"
    if [[ "${_stage_count}" != "0" ]]; then
      printf '{%s}' "${_stage_count}"
    fi

    # текущий подкаталог текущего проекта(репозитория).
    # shellcheck disable=SC2155
    local _bppp_cur_subdir="$(git rev-parse --show-prefix 2>/dev/null)"

    if ((${#_bppp_cur_subdir} > 25)); then #< обрезать длинный путь до 25 символов
      _bppp_cur_subdir="…${_bppp_cur_subdir: -25:25}"
      _bppp_cur_subdir="./${_bppp_cur_subdir}"
    else
      _bppp_cur_subdir="./${_bppp_cur_subdir}"
    fi

    printf ' %b'\''%s'\''\1SGR(reset_all)\2 ' "${_bppp_cf_subdir}" "${_bppp_cur_subdir}"

  fi

  printf '%b❯\1%b\033[J%b\2 ' "${_user_af}" 'SGR(reset_all)' 'SGR(bold_on)'

  #@todo: очистить окно терминала после изменения размеров
}
# endregion

# region Set PS1, PROMPT_COMMAND, terminal title etc.
# ==============================================================================

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
  debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
xterm-color | *-256color) color_prompt=yes ;;
esac

PROMPT_DIRTRIM=3 #< number of trailing directory components
if [ "$color_prompt" = yes ]; then
  if [[ "${COLORTERM}" = "truecolor" ]] && [[ "${TERM_PROGRAM}" != "vscode" ]]; then

    PROMPT_COMMAND="trap 'bppp_trap_precommand' DEBUG; bppp_postcommand"
    # shellcheck disable=SC2034,SC2016
    PS0='$(bppp_print_precommand)'
    PS1='${debian_chroot:+($debian_chroot)}$(bppp_print_prompt)'
  else
    PS1='\[SGR(reset_all, bold_on)\]\n${debian_chroot:+($debian_chroot)}\[SGR(set_fg_Green)\]\u@\h\[SGR(reset_all)\]:\[SGR(set_fg_Blue)\]\w ❯\[SGR(reset_all)\] '
  fi
else
  PS1='\n${debian_chroot:+($debian_chroot)}\u@\h:\w\ ❯ '
fi
unset color_prompt

# endregion
